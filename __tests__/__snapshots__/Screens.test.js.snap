// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AboutScreen renders correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "paddingHorizontal": 15,
      "paddingVertical": 10,
    }
  }
>
  <Text
    style={
      Object {
        "fontSize": 25,
        "fontWeight": "bold",
      }
    }
  >
    CarGoWhere
  </Text>
  <Text />
  <Text
    style={
      Object {
        "color": "grey",
        "fontSize": 15,
      }
    }
  >
    Need to know where to park your car?
  </Text>
  <Text />
  <Text
    style={
      Object {
        "color": "grey",
        "fontSize": 15,
      }
    }
  >
    CarGoWhere provides realtime Carpark Availability data for you to plan your trips.
  </Text>
</View>
`;

exports[`Carpark renders correctly 1`] = `
<View
  accessible={true}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "borderBottomColor": "#eee",
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "column",
          "marginLeft": 10,
          "paddingTop": 5,
        }
      }
    >
      <View
        accessibilityIgnoresInvertColors={true}
        style={
          Object {
            "height": 30,
            "marginBottom": 3,
            "marginTop": 5,
            "width": 30,
          }
        }
      >
        <Image
          source={
            Object {
              "testUri": "../../../images/marker.png",
            }
          }
          style={
            Array [
              Object {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              },
              Object {
                "height": 30,
                "width": 30,
              },
              undefined,
            ]
          }
        />
        <Text
          style={
            Object {
              "color": "white",
              "fontSize": 12,
              "paddingTop": 3,
              "textAlign": "center",
            }
          }
        >
          NaN
        </Text>
      </View>
      <Text
        style={
          Object {
            "color": "#6a94ff",
            "fontSize": 11,
            "marginBottom": 3,
            "textAlign": "center",
            "width": 40,
          }
        }
      >
        0m
      </Text>
    </View>
    <View
      style={
        Object {
          "alignItems": "flex-start",
          "flexDirection": "column",
          "justifyContent": "space-between",
          "marginLeft": 15,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#494949",
            "fontSize": 15,
          }
        }
      />
      <Text
        style={
          Object {
            "color": "#777777",
            "fontSize": 12,
          }
        }
      >
        Lots available: 20
      </Text>
    </View>
    <View
      accessible={true}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    />
  </View>
</View>
`;

exports[`DetailedView renders correctly 1`] = `null`;

exports[`Favourite renders correctly 1`] = `
<View
  accessible={true}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "borderBottomColor": "#eee",
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "column",
          "marginLeft": 10,
          "paddingTop": 5,
        }
      }
    >
      <Image
        source={
          Object {
            "testUri": "../../../images/heart.png",
          }
        }
        style={
          Object {
            "borderWidth": 1,
            "height": 20,
            "marginBottom": 3,
            "marginTop": 5,
            "width": 20,
          }
        }
      />
    </View>
    <View
      style={
        Object {
          "alignItems": "flex-start",
          "flexDirection": "column",
          "justifyContent": "space-between",
          "marginLeft": 15,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#494949",
            "fontSize": 15,
          }
        }
      />
    </View>
    <View
      accessible={true}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <Image
        source={
          Object {
            "testUri": "../../../images/chevron.png",
          }
        }
        style={
          Object {
            "borderWidth": 1,
            "height": 20,
            "marginBottom": 3,
            "marginTop": 5,
            "width": 20,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`FavouritesScreen renders correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "backgroundColor": "#eee",
        "borderBottomColor": "#eee",
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "paddingVertical": 10,
      }
    }
  >
    <Text
      style={
        Object {
          "fontSize": 20,
          "paddingLeft": 20,
          "textDecorationLine": "underline",
        }
      }
    >
      Favourites
    </Text>
  </View>
  <View
    accessibilityRole="button"
    accessibilityState={Object {}}
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Press to remove/add
      </Text>
    </View>
  </View>
  <RCTScrollView
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "width": "100%",
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
</View>
`;

exports[`NearbyScreen renders correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "height": "100%",
        "left": "0%",
        "transform": Array [
          Object {
            "translateX": 0,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "#eee",
          "borderBottomColor": "#eee",
          "borderBottomWidth": 1,
          "flexDirection": "row",
        }
      }
    >
      <Text
        style={
          Object {
            "fontSize": 20,
            "paddingLeft": 20,
            "paddingTop": 10,
            "textDecorationLine": "underline",
          }
        }
      >
        Nearby
      </Text>
      <Text
        style={
          Object {
            "flex": 1,
            "fontSize": 20,
            "paddingTop": 10,
            "textAlign": "right",
          }
        }
      >
        Sort By:
      </Text>
      <View
        style={
          Object {
            "color": "black",
            "width": "43%",
          }
        }
      >
        <RNCPicker
          items={
            Array [
              Object {
                "label": "Distance",
                "testID": undefined,
                "textColor": undefined,
                "value": "distance",
              },
              Object {
                "label": "Availability",
                "testID": undefined,
                "textColor": undefined,
                "value": "availability",
              },
            ]
          }
          onChange={[Function]}
          selectedIndex={0}
          style={
            Array [
              Object {
                "height": 216,
              },
              undefined,
            ]
          }
        />
      </View>
    </View>
    <RCTScrollView
      data={Array []}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View />
    </RCTScrollView>
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "height": "100%",
        "left": "100%",
        "position": "absolute",
        "transform": Array [
          Object {
            "translateX": 0,
          },
        ],
        "width": "100%",
      }
    }
  />
</View>
`;

exports[`SearchScreen renders correctly 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "column",
      "justifyContent": "flex-start",
    }
  }
>
  <View
    style={
      Object {
        "backgroundColor": "white",
        "borderColor": "lightgrey",
        "borderRadius": 20,
        "borderStyle": "solid",
        "borderWidth": 1,
        "height": 50,
        "margin": 10,
        "padding": 3,
        "paddingLeft": 20,
        "paddingRight": 20,
        "width": "94%",
      }
    }
  >
    <TextInput
      allowFontScaling={true}
      editable={true}
      onChangeText={[Function]}
      onSubmitEditing={[Function]}
      placeholder="Search..."
      rejectResponderTermination={true}
      underlineColorAndroid="transparent"
      value=""
    />
  </View>
</View>
`;
